{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CS 135 - Computer Science I This is the official class webpage for TMCC's CS 135 - Computer Science I class taught by Julian Vu. This webpage contains general information about the course, including the syllabus, labs, and any other handouts relevant to the course. All course lesson videos are on Canvas. Welcome to CS 135! I'm thrilled to be teaching this course! For many of you, this will be your first dive into the vast and growing world of computer science. I'm honored and grateful that you have chosen me to be your instructor. I've been teaching computer science at TMCC since the Fall of 2022. Over the past several semesters, I've been continually impressed by the passion and curiosity that so many students bring into this course. Computers are indeed deeply integrated into nearly every part of our daily lives, and continually find applications in new areas every day. The goal of this course is to give you the skills to give computers instructions on how to solve problems.","title":"Home"},{"location":"#cs-135-computer-science-i","text":"This is the official class webpage for TMCC's CS 135 - Computer Science I class taught by Julian Vu. This webpage contains general information about the course, including the syllabus, labs, and any other handouts relevant to the course. All course lesson videos are on Canvas.","title":"CS 135 - Computer Science I"},{"location":"#welcome-to-cs-135","text":"I'm thrilled to be teaching this course! For many of you, this will be your first dive into the vast and growing world of computer science. I'm honored and grateful that you have chosen me to be your instructor. I've been teaching computer science at TMCC since the Fall of 2022. Over the past several semesters, I've been continually impressed by the passion and curiosity that so many students bring into this course. Computers are indeed deeply integrated into nearly every part of our daily lives, and continually find applications in new areas every day. The goal of this course is to give you the skills to give computers instructions on how to solve problems.","title":"Welcome to CS 135!"},{"location":"about/","text":"About CS 135 This course is an introduction to modern problem solving and programming methods. Emphasis is placed on algorithm development. A special focus will be on procedural and data abstraction, emphasizing design, testing, and documentation. The primary objective of this course is to provide students with the skills necessary for programming and problem solving using a computer. The principal programming language utilized in this course is C++ . Upon successful completion of this course, students will be able to: Analyze and explain the behavior of programs involving fundamental program constructs Write programs that use those fundamental program constructs Organize, design, and document programs Design algorithms that solve a stated problem Describe basic data structures Utilize the Visual Studio Code editor to write programs Apply the fundamentals of object-oriented programming","title":"About"},{"location":"about/#about-cs-135","text":"This course is an introduction to modern problem solving and programming methods. Emphasis is placed on algorithm development. A special focus will be on procedural and data abstraction, emphasizing design, testing, and documentation. The primary objective of this course is to provide students with the skills necessary for programming and problem solving using a computer. The principal programming language utilized in this course is C++ . Upon successful completion of this course, students will be able to: Analyze and explain the behavior of programs involving fundamental program constructs Write programs that use those fundamental program constructs Organize, design, and document programs Design algorithms that solve a stated problem Describe basic data structures Utilize the Visual Studio Code editor to write programs Apply the fundamentals of object-oriented programming","title":"About CS 135"},{"location":"labs/","text":"Labs Computer science adopts the term 'science' in part due to how understanding computer science can be achieved through experimentation and exploration. Thus, students of computer science must supplement the topics they learn in lecture with so-called 'laboratory' assignments to more fully cement their understanding of those topics. Students new to computer science are often afraid of experimenting with code\u2014they fear they might irreparably break their computer in performing those experiments. In truth, accidentally writing a program that causes a great deal of damage is remarkably difficult for a beginner. Such a program is the very definition of a computer virus! Malicious hackers have been trying to write such viruses to attack other people's computers for a very long time, and the world at large has generally risen to build countermeasures for such attacks. Thus, it's unlikely a beginner programmer will unwittingly author a virus capable of destroying their computer. What will most likely occur when you write a bad program is it will simply crash or spin forever and become unresponsive. You've likely come across such programs in your daily life (e.g. a game suddenly crashes or Photoshop decides to freeze). In which case, the solution is to track down the buggy code, fix it, and restart the program. No real damage is done (other than perhaps losing unsaved work). At worst, you'll freeze up your entire computer, but even that can be solved by a simple reboot. I hope I've relieved you of any fears you might have about experimenting with code. As a computer science educator and practitioner, I'm committed to lab assignments as a vital component of computer science education, and hope that you will take advantage of them to enhanced and solidify your understanding of computer science. Each lab assignment involves essentially two deliverables: writing source code describing what the source code does in a lab report Each lab assignment contains a sequence of steps to follow, much like a lab procedure in a traditional science class. The assignment is not like a tutorial or recipe, and should not be treated as such\u2014you should follow the given steps while actively thinking about what is happening in the source code. Questions are presented throughout the assignment that are meant to keep you engaged and thinking about what's happening, and they must be answered in the lab report as it appears in the lab assignment. More information about how to write a lab report can be found below in the Writing a Lab Report section. In lecture, you will be given various techniques and tools with which to solve problems, but it is up to you to figure out how to apply those techniques in coming up with solutions to the problems presented. The lab assignment procedure merely offers guidance and hints on how to proceed. Thinking of yourself as an investigator is often helpful in lab assignments. For example, to solve a given problem, how might you do it by hand? Then translate that manual process into code. If there are errors, find their causes. Challenge your assumptions. By taking this investigative approach, you will have a much better experience with programming\u2014you will learn more and learn more easily. Writing a Lab Report This section describes a general outline for lab reports. Title: The report should have a title. The title of the lab assignment will suffice. Student Information Student Name Class Instructor Lab Overview: Provide a brief summary of the lab assignment and the main objectives. Answers to Lab Questions: Respond to all assigned questions from the lab assignment in this section. Observations and Conclusions: What went well? What would you do differently next time? How might the lab assignment be improved or updated for future students? Lab reports should be written in the passive voice (i.e. in third person, past tense). While English classes teach that the passive voice is incorrect and should be avoided, scientists are more concerned with being impersonal and objective. You should write lab reports in past tense, and avoid using personal pronouns like \"I\" or \"we.\" Lab reports must be typed in a README.md file in Markdown format . Markdown is a simple way of formatting plaintext files to make them easier to read and follow. To learn how to write text files in Markdown, see the following guide: Markdown Guide . A template is provided below. --- # Title ## Student Information - **Student:** <Your Name> - **Class:** <Class Name> - **Instructor:** <Instructor's Name> --- ## Lab Overview Provide a brief summary of the lab assignment and the main objectives. --- ## Answers to Lab Questions Respond to all assigned questions from the lab assignment in this section. --- ## Observations and Conclusions","title":"Labs"},{"location":"labs/#labs","text":"Computer science adopts the term 'science' in part due to how understanding computer science can be achieved through experimentation and exploration. Thus, students of computer science must supplement the topics they learn in lecture with so-called 'laboratory' assignments to more fully cement their understanding of those topics. Students new to computer science are often afraid of experimenting with code\u2014they fear they might irreparably break their computer in performing those experiments. In truth, accidentally writing a program that causes a great deal of damage is remarkably difficult for a beginner. Such a program is the very definition of a computer virus! Malicious hackers have been trying to write such viruses to attack other people's computers for a very long time, and the world at large has generally risen to build countermeasures for such attacks. Thus, it's unlikely a beginner programmer will unwittingly author a virus capable of destroying their computer. What will most likely occur when you write a bad program is it will simply crash or spin forever and become unresponsive. You've likely come across such programs in your daily life (e.g. a game suddenly crashes or Photoshop decides to freeze). In which case, the solution is to track down the buggy code, fix it, and restart the program. No real damage is done (other than perhaps losing unsaved work). At worst, you'll freeze up your entire computer, but even that can be solved by a simple reboot. I hope I've relieved you of any fears you might have about experimenting with code. As a computer science educator and practitioner, I'm committed to lab assignments as a vital component of computer science education, and hope that you will take advantage of them to enhanced and solidify your understanding of computer science. Each lab assignment involves essentially two deliverables: writing source code describing what the source code does in a lab report Each lab assignment contains a sequence of steps to follow, much like a lab procedure in a traditional science class. The assignment is not like a tutorial or recipe, and should not be treated as such\u2014you should follow the given steps while actively thinking about what is happening in the source code. Questions are presented throughout the assignment that are meant to keep you engaged and thinking about what's happening, and they must be answered in the lab report as it appears in the lab assignment. More information about how to write a lab report can be found below in the Writing a Lab Report section. In lecture, you will be given various techniques and tools with which to solve problems, but it is up to you to figure out how to apply those techniques in coming up with solutions to the problems presented. The lab assignment procedure merely offers guidance and hints on how to proceed. Thinking of yourself as an investigator is often helpful in lab assignments. For example, to solve a given problem, how might you do it by hand? Then translate that manual process into code. If there are errors, find their causes. Challenge your assumptions. By taking this investigative approach, you will have a much better experience with programming\u2014you will learn more and learn more easily.","title":"Labs"},{"location":"labs/#writing-a-lab-report","text":"This section describes a general outline for lab reports. Title: The report should have a title. The title of the lab assignment will suffice. Student Information Student Name Class Instructor Lab Overview: Provide a brief summary of the lab assignment and the main objectives. Answers to Lab Questions: Respond to all assigned questions from the lab assignment in this section. Observations and Conclusions: What went well? What would you do differently next time? How might the lab assignment be improved or updated for future students? Lab reports should be written in the passive voice (i.e. in third person, past tense). While English classes teach that the passive voice is incorrect and should be avoided, scientists are more concerned with being impersonal and objective. You should write lab reports in past tense, and avoid using personal pronouns like \"I\" or \"we.\" Lab reports must be typed in a README.md file in Markdown format . Markdown is a simple way of formatting plaintext files to make them easier to read and follow. To learn how to write text files in Markdown, see the following guide: Markdown Guide . A template is provided below. --- # Title ## Student Information - **Student:** <Your Name> - **Class:** <Class Name> - **Instructor:** <Instructor's Name> --- ## Lab Overview Provide a brief summary of the lab assignment and the main objectives. --- ## Answers to Lab Questions Respond to all assigned questions from the lab assignment in this section. --- ## Observations and Conclusions","title":"Writing a Lab Report"},{"location":"labs/lab01/","text":"Lab 01 - The Fundamentals of C++ Experiencing Compile-Time Errors Even a small spelling error or missing symbol can cause a variety of errors at compile time, which may confuse or mislead you. These error messages, while intended to be helpful, are not always written with the beginner in mind. So, they may contain language that is confusing or scary. In this lab, you will deliberately cause several errors and read the error messages they generate. Copy the following program exactly as shown: Create a new source file called errors.cpp , and copy the following source code exactly as shown: #include <iostream> int main () double enterprise = 17.01 ; double discovery = 10.31 ; std :: cout << \"enterprise: \" << enterprise << std :: endl ; std :: cout << \"discovery: \" << discovery << std :: endl ; return 0 ; } Attempt to compile the source code. The compiler should have generated several errors. How many errors occurred? When faced with a great many error messages at once, it helps to focus on the first one that's reported since fixing it may fix some (or all) of the others. What does the first error message say? From that error message, what do you think would fix it? Add { after int main() and attempt the compilation again. How many errors occurred? Remove the #include <iostream> directive and attempt to compile the source code. How many errors occurred? Add back the deleted #include directive. Remove the () after main and attempt to compile the source code. How many errors occurred?","title":"Lab 01"},{"location":"labs/lab01/#lab-01-the-fundamentals-of-c","text":"","title":"Lab 01 - The Fundamentals of C++"},{"location":"labs/lab01/#experiencing-compile-time-errors","text":"Even a small spelling error or missing symbol can cause a variety of errors at compile time, which may confuse or mislead you. These error messages, while intended to be helpful, are not always written with the beginner in mind. So, they may contain language that is confusing or scary. In this lab, you will deliberately cause several errors and read the error messages they generate. Copy the following program exactly as shown: Create a new source file called errors.cpp , and copy the following source code exactly as shown: #include <iostream> int main () double enterprise = 17.01 ; double discovery = 10.31 ; std :: cout << \"enterprise: \" << enterprise << std :: endl ; std :: cout << \"discovery: \" << discovery << std :: endl ; return 0 ; } Attempt to compile the source code. The compiler should have generated several errors. How many errors occurred? When faced with a great many error messages at once, it helps to focus on the first one that's reported since fixing it may fix some (or all) of the others. What does the first error message say? From that error message, what do you think would fix it? Add { after int main() and attempt the compilation again. How many errors occurred? Remove the #include <iostream> directive and attempt to compile the source code. How many errors occurred? Add back the deleted #include directive. Remove the () after main and attempt to compile the source code. How many errors occurred?","title":"Experiencing Compile-Time Errors"}]}