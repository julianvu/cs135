{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"About CS 135 This course is an introduction to modern problem solving and programming methods. Emphasis is placed on algorithm development. A special focus will be on procedural and data abstraction, emphasizing design, testing, and documentation.","title":"About"},{"location":"about/#about-cs-135","text":"This course is an introduction to modern problem solving and programming methods. Emphasis is placed on algorithm development. A special focus will be on procedural and data abstraction, emphasizing design, testing, and documentation.","title":"About CS 135"},{"location":"labs/","text":"Labs Computer science adopts the term 'science' in part due to how understanding computer science can be achieved through experimentation and exploration. Thus, students of computer science must supplement the topics they learn in lecture with so-called 'laboratory' assignments to more fully cement their understanding of those topics. Students new to computer science are often afraid of experimenting with code\u2014they fear they might irreparably break their computer in performing those experiments. In truth, accidentally writing a program that causes a great deal of damage is remarkably difficult for a beginner. Such a program is the very definition of a computer virus! Malicious hackers have been trying to write such viruses to attack other people's computers for a very long time, and the world at large has generally risen to build countermeasures for such attacks. Thus, it's unlikely a beginner programmer will unwittingly author a virus capable of destroying their computer. What will most likely occur when you write a bad program is it will simply crash or spin forever and become unresponsive. You've likely come across such programs in your daily life (e.g. a game suddenly crashes or Photoshop decides to freeze). In which case, the solution is to track down the buggy code, fix it, and restart the program. No real damage is done (other than perhaps losing unsaved work). At worst, you'll freeze up your entire computer, but even that can be solved by a simple reboot. I hope I've relieved you of any fears you might have about experimenting with code. As a computer science educator and practitioner, I'm committed to lab assignments as a vital component of computer science education, and hope that you will take advantage of them to enhanced and solidify your understanding of computer science. Each lab assignment involves essentially two deliverables: writing source code describing what the source code does in a lab report Each lab assignment contains a sequence of steps to follow, much like a lab procedure in a traditional science class. The assignment is not like a tutorial or recipe\u2014you should not simply follow the steps without thinking about what is happening in the source code. Questions are presented throughout the assignment that are meant to keep you engaged and thinking about what's happening, and they must be answered in the lab report. In lecture, you will be given various techniques and tools with which to solve problems, but it is up to you to figure out how to apply those techniques in coming up with solutions to the problems presented. The lab assignment procedure merely offers guidance and hints on how to proceed. Thinking of yourself as an investigator is often helpful in lab assignments. For example, to solve a given problem, how might you do it by hand? Then translate that manual process into code. If there are errors, find their causes. Challenge your assumptions. By taking this investigative approach, you will have a much better experience with programming\u2014you will learn more and learn more easily.","title":"Labs"},{"location":"labs/#labs","text":"Computer science adopts the term 'science' in part due to how understanding computer science can be achieved through experimentation and exploration. Thus, students of computer science must supplement the topics they learn in lecture with so-called 'laboratory' assignments to more fully cement their understanding of those topics. Students new to computer science are often afraid of experimenting with code\u2014they fear they might irreparably break their computer in performing those experiments. In truth, accidentally writing a program that causes a great deal of damage is remarkably difficult for a beginner. Such a program is the very definition of a computer virus! Malicious hackers have been trying to write such viruses to attack other people's computers for a very long time, and the world at large has generally risen to build countermeasures for such attacks. Thus, it's unlikely a beginner programmer will unwittingly author a virus capable of destroying their computer. What will most likely occur when you write a bad program is it will simply crash or spin forever and become unresponsive. You've likely come across such programs in your daily life (e.g. a game suddenly crashes or Photoshop decides to freeze). In which case, the solution is to track down the buggy code, fix it, and restart the program. No real damage is done (other than perhaps losing unsaved work). At worst, you'll freeze up your entire computer, but even that can be solved by a simple reboot. I hope I've relieved you of any fears you might have about experimenting with code. As a computer science educator and practitioner, I'm committed to lab assignments as a vital component of computer science education, and hope that you will take advantage of them to enhanced and solidify your understanding of computer science. Each lab assignment involves essentially two deliverables: writing source code describing what the source code does in a lab report Each lab assignment contains a sequence of steps to follow, much like a lab procedure in a traditional science class. The assignment is not like a tutorial or recipe\u2014you should not simply follow the steps without thinking about what is happening in the source code. Questions are presented throughout the assignment that are meant to keep you engaged and thinking about what's happening, and they must be answered in the lab report. In lecture, you will be given various techniques and tools with which to solve problems, but it is up to you to figure out how to apply those techniques in coming up with solutions to the problems presented. The lab assignment procedure merely offers guidance and hints on how to proceed. Thinking of yourself as an investigator is often helpful in lab assignments. For example, to solve a given problem, how might you do it by hand? Then translate that manual process into code. If there are errors, find their causes. Challenge your assumptions. By taking this investigative approach, you will have a much better experience with programming\u2014you will learn more and learn more easily.","title":"Labs"},{"location":"labs/lab01/","text":"Lab 01 - The Fundamentals of C++ Experiencing Compile-Time Errors Even a small spelling error or missing symbol can cause a variety of errors at compile time, which may confuse or mislead you. These error messages, while intended to be helpful, are not always written with the beginner in mind. So, they may contain language that is confusing or scary. In this lab, you will deliberately cause several errors and read the error messages they generate. Copy the following program exactly as shown: Create a new source file called errors.cpp , and copy the following source code exactly as shown: #include <iostream> int main () double enterprise = 17.01 ; double discovery = 10.31 ; std :: cout << \"enterprise: \" << enterprise << std :: endl ; std :: cout << \"discovery: \" << discovery << std :: endl ; return 0 ; } Attempt to compile the source code. The compiler should have generated several errors. How many errors occurred? When faced with a great many error messages at once, it helps to focus on the first one that's reported since fixing it may fix some (or all) of the others. What does the first error message say? From that error message, what do you think would fix it? Add { after int main() and attempt the compilation again. How many errors occurred? Remove the #include <iostream> directive and attempt to compile the source code. How many errors occurred? Add back the deleted #include directive. Remove the () after main and attempt to compile the source code. How many errors occurred?","title":"Lab 01"},{"location":"labs/lab01/#lab-01-the-fundamentals-of-c","text":"","title":"Lab 01 - The Fundamentals of C++"},{"location":"labs/lab01/#experiencing-compile-time-errors","text":"Even a small spelling error or missing symbol can cause a variety of errors at compile time, which may confuse or mislead you. These error messages, while intended to be helpful, are not always written with the beginner in mind. So, they may contain language that is confusing or scary. In this lab, you will deliberately cause several errors and read the error messages they generate. Copy the following program exactly as shown: Create a new source file called errors.cpp , and copy the following source code exactly as shown: #include <iostream> int main () double enterprise = 17.01 ; double discovery = 10.31 ; std :: cout << \"enterprise: \" << enterprise << std :: endl ; std :: cout << \"discovery: \" << discovery << std :: endl ; return 0 ; } Attempt to compile the source code. The compiler should have generated several errors. How many errors occurred? When faced with a great many error messages at once, it helps to focus on the first one that's reported since fixing it may fix some (or all) of the others. What does the first error message say? From that error message, what do you think would fix it? Add { after int main() and attempt the compilation again. How many errors occurred? Remove the #include <iostream> directive and attempt to compile the source code. How many errors occurred? Add back the deleted #include directive. Remove the () after main and attempt to compile the source code. How many errors occurred?","title":"Experiencing Compile-Time Errors"}]}